{"version":3,"sources":["components/MovieListing/MovieListing.js","components/SearchBar/SearchBar.js","components/ViewSwitch/ViewSwitch.js","logo.svg","App.js","reportWebVitals.js","index.js"],"names":["MovieListing","props","disabled","onClick","data","imdbID","className","isGrid","nominated","alt","Title","src","Poster","Year","icon","faStarHollow","faStarSolid","SearchBar","typingTimer","faSearch","size","placeholder","onChange","e","searchString","target","value","length","clearTimeout","setTimeout","str","setSearchStr","axios","get","process","then","res","setSearchRes","uniqBy","Search","ViewSwitch","type","id","setIsGrid","checked","htmlFor","faThLarge","faList","App","useState","searchStr","searchRes","Map","nomItems","setNomItems","toggleMovieNomination","prevState","newNoms","has","delete","set","logo","faFolderOpen","map","faStar","Array","from","values","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0937013e.chunk.js","sourcesContent":["import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faStar as faStarSolid } from '@fortawesome/free-solid-svg-icons';\nimport { faStar as faStarHollow } from '@fortawesome/free-regular-svg-icons';\n\nimport './MovieListing.css';\n\nfunction MovieListing(props) {\n    return(\n        <button\n            disabled={props.disabled}\n            onClick={() => { props.onClick(props.data.imdbID, props.data) }}\n            className={`\n                movieItem\n                ${props.isGrid ? \"gridView\" : \"listView\"}\n                ${props.disabled && \"disabled opacity-50 cursor-default\"}\n                ${props.nominated && \"nominated\"}`}>\n            {props.isGrid && <img className=\"object-contain\" alt={props.data.Title} src={props.data.Poster} />}\n            <span className=\"title self-center\">{props.data.Title}</span>\n            <span className=\"year text-gray-500 self-center justify-self-start leading-none\">{props.data.Year}</span>\n            <span className=\"star fa-layers fa-lg justify-self-end\">\n                <FontAwesomeIcon\n                    icon={faStarHollow}\n                    className={`\n                        ${props.nominated ? \"text-yellow-400\" : \"text-gray-500\"}\n                        ${props.disabled && \"opacity-0\"}\n                        break-words`}/>\n                <FontAwesomeIcon\n                    icon={faStarSolid}\n                    className={`\n                        solidStar\n                        ${props.nominated ? \"nominated text-yellow-400\" : \"text-gray-500\"}\n                        ${props.disabled && \"disabled\"}\n                        break-words`}/>\n            </span>\n        </button>\n    )\n}\n\nexport default MovieListing;","import React from 'react';\r\nimport axios from 'axios';\r\nimport { uniqBy } from 'lodash';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\r\n\r\nfunction SearchBar(props) {\r\n    let typingTimer = null;\r\n\r\n    const search = (str) => {\r\n        props.setSearchStr(str);\r\n\r\n        axios.get(`http://www.omdbapi.com/?apikey=${process.env.REACT_APP_OMDB_API_KEY}&s=${str}&type=movie`)\r\n            .then((res) => props.setSearchRes(uniqBy(res.data.Search, \"imdbID\")));\r\n    }\r\n\r\n    return (\r\n        <div className=\"component flex items-center\">\r\n            <FontAwesomeIcon icon={faSearch} size=\"lg\" className=\"mx-2\"/>\r\n            <input\r\n                className=\"flex-1\"\r\n                placeholder=\"Search for a movie\"\r\n                onChange={(e) => {\r\n                    const searchString = e.target.value;\r\n\r\n                    if (searchString.length < 1) return;\r\n\r\n                    // Wait a bit before searching to avoid spamming api\r\n                    if (typingTimer) clearTimeout(typingTimer);\r\n\r\n                    typingTimer = setTimeout(() => { search(searchString); }, 1000);\r\n                }}\r\n            />\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default SearchBar;","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faList, faThLarge } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport './ViewSwitch.css';\r\n\r\nfunction ViewSwitch(props) {\r\n    return (\r\n        <div className=\"switch\">\r\n            <input type=\"checkbox\" id=\"viewSwitch\" className=\"hidden\" onChange={(e) => props.setIsGrid(e.target.checked)}/>\r\n            <label htmlFor=\"viewSwitch\" className=\"component viewSwitch rounded block relative cursor-pointer\">\r\n                <div className={`switchBlock rounded absolute bg-yellow-400 z-10 transition-all ${props.isGrid ? \"gridView\" : \"listView\"}`}></div>\r\n                <FontAwesomeIcon\r\n                    icon={faThLarge}\r\n                    size=\"lg\"\r\n                    className={`absolute z-20 transition-colors switchIcon gridView ${props.isGrid ? \"text-white\" : \"text-black\"}`}/>\r\n                <FontAwesomeIcon\r\n                    icon={faList}\r\n                    size=\"lg\"\r\n                    className={`absolute z-20 transition-colors switchIcon listView ${props.isGrid ? \"text-black\" : \"text-white\"}`}/>\r\n            </label>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ViewSwitch;","export default __webpack_public_path__ + \"static/media/logo.8ab42f29.svg\";","import React, { useState } from 'react';\n\nimport MovieListing from './components/MovieListing/MovieListing';\nimport SearchBar from './components/SearchBar/SearchBar';\nimport ViewSwitch from './components/ViewSwitch/ViewSwitch'\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faStar, faFolderOpen } from '@fortawesome/free-regular-svg-icons';\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\n\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n    const [searchStr, setSearchStr] = useState(null)\n    const [searchRes, setSearchRes] = useState(null);\n    const [nomItems, setNomItems] = useState(new Map());\n    const [isGrid, setIsGrid] = useState(true);\n\n    const toggleMovieNomination = (id, data) => {\n        setNomItems(prevState => {\n            const newNoms = new Map(prevState);\n            if (nomItems.has(id)) {\n                newNoms.delete(id);\n            } else {\n                newNoms.set(id, data);\n            }\n            return newNoms;\n        });\n    }\n\n    return (\n        <div className=\"p-4 lg:p-20 flex flex-col bg-gray-50 min-h-screen\">\n            <img src={logo} alt=\"logo\" className=\"mx-auto mb-4 xl:w-2/6\" />\n            <SearchBar setSearchRes={setSearchRes} setSearchStr={setSearchStr} />\n\n            <div className=\"flex align-middle\">\n                <div className={`flex-1 bg-yellow-300 m-2 p-3 rounded align-middle ${nomItems.size < 5 && \"invisible\"}`}>Thank you for voting!</div>\n                <ViewSwitch isGrid={isGrid} setIsGrid={setIsGrid} />\n            </div>\n\n            <div className=\"flex flex-1 flex-col-reverse sm:flex-row\">\n                <div className=\"component flex-1\">\n                    {!searchRes &&\n                        <div className=\"blankComponentText\">\n                            <FontAwesomeIcon icon={faSearch} size=\"3x\" className=\"text-black\"/>\n                            <div className=\"m-1\">Use the search bar to look for a movie you want to nominate!</div>\n                        </div>\n                    }\n                    {!!searchRes && (searchRes.length === 0 ?\n                        <div className=\"blankComponentText\">\n                            <FontAwesomeIcon icon={faFolderOpen} size=\"3x\" className=\"text-black\"/>\n                            <div>There are no search results.</div>\n                        </div>\n                        :\n                        <>\n                            <h3>Search results for: \"{searchStr}\"</h3>\n                            <div className={`flex-1 grid ${isGrid ? \"md:grid-cols-2 xl:grid-cols-3\" : \"grid-cols-1\"} transition-all`}>\n                                {searchRes.map(res => (\n                                    <MovieListing data={res} key={res.imdbID} onClick={toggleMovieNomination} disabled={nomItems.size >= 5 || nomItems.has(res.imdbID)} nominated={nomItems.has(res.imdbID)} isGrid={isGrid} />\n                                ))}\n                            </div>\n                        </>\n                    )}\n                </div>\n\n                <div className=\"component flex-1\">\n                    {nomItems.size === 0 ?\n                        <div className=\"blankComponentText\">\n                            <FontAwesomeIcon icon={faStar} size=\"3x\" className=\"text-black\"/>\n                            <div className=\"m-1\">You haven't nominated any items yet. Click a movie to nominate it.</div>\n                        </div>\n                        :\n                        <>\n                            <h3>Nominations: {nomItems.size}/5</h3>\n                            <div className={`grid ${isGrid ? \"md:grid-cols-2 xl:grid-cols-3\" : \"grid-cols-1\"} transition-all`}>\n                                {Array.from(nomItems.values()).map(res => (\n                                    <MovieListing data={res} key={res.imdbID} onClick={toggleMovieNomination} nominated={true} disabled={false} isGrid={isGrid} />\n                                ))}\n                            </div>\n                        </>\n                        \n                        \n                    }\n                </div>\n            </div>\n\n            \n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}