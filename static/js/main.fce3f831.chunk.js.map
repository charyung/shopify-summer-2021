{"version":3,"sources":["components/MovieListing/MovieListing.js","components/SearchBar/SearchBar.js","components/ViewSwitch/ViewSwitch.js","components/LinkButton/LinkButton.js","components/TextBanner/TextBanner.js","logo.svg","App.js","reportWebVitals.js","index.js"],"names":["MovieListing","props","disabled","onClick","data","imdbID","className","isGrid","nominated","alt","Title","src","Poster","Year","icon","faStarHollow","faStarSolid","SearchBar","typingTimer","faSearch","size","placeholder","onChange","e","searchString","target","value","length","clearTimeout","setTimeout","str","setSearchStr","axios","get","process","then","res","setSearchRes","uniqBy","Search","ViewSwitch","type","id","checked","console","log","setIsGrid","htmlFor","faThLarge","faList","LinkButton","useState","window","location","origin","pathname","sharableLink","setSharableLink","useEffect","nominatedIds","Array","from","nomItems","keys","searchParamsString","join","readOnly","navigator","clipboard","writeText","setCopyBannerVisible","faClone","TextBanner","visible","backgroundColourClass","text","faTimes","setVisibility","App","searchStr","searchRes","Map","setNomItems","votingBannerVisible","setVotingBannerVisible","copyBannerVisible","URL","searchParams","split","Promise","all","map","prevState","newNoms","forEach","movie","set","toggleMovieNomination","has","delete","logo","faFolderOpen","faStar","values","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fce3f831.chunk.js","sourcesContent":["import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faStar as faStarSolid } from '@fortawesome/free-solid-svg-icons';\nimport { faStar as faStarHollow } from '@fortawesome/free-regular-svg-icons';\n\nimport './MovieListing.css';\n\nfunction MovieListing(props) {\n    return(\n        <button\n            disabled={props.disabled}\n            onClick={() => { props.onClick(props.data.imdbID, props.data) }}\n            className={`\n                movieItem\n                ${props.isGrid ? \"gridView\" : \"listView\"}\n                ${props.disabled && \"disabled opacity-50 cursor-default\"}\n                ${props.nominated && \"nominated\"}`}>\n            {props.isGrid && <img className=\"object-contain\" alt={props.data.Title} src={props.data.Poster} />}\n            <span className=\"title self-center\">{props.data.Title}</span>\n            <span className=\"year text-gray-500 self-center justify-self-start leading-none\">{props.data.Year}</span>\n            <span className=\"star fa-layers fa-lg justify-self-end\">\n                <FontAwesomeIcon\n                    icon={faStarHollow}\n                    className={`\n                        ${props.nominated ? \"text-yellow-400\" : \"text-gray-500\"}\n                        ${props.disabled && \"opacity-0\"}\n                        break-words`}/>\n                <FontAwesomeIcon\n                    icon={faStarSolid}\n                    className={`\n                        solidStar\n                        ${props.nominated ? \"nominated text-yellow-400\" : \"text-gray-500\"}\n                        ${props.disabled && \"disabled\"}\n                        break-words`}/>\n            </span>\n        </button>\n    )\n}\n\nexport default MovieListing;","import React from 'react';\r\nimport axios from 'axios';\r\nimport { uniqBy } from 'lodash';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\r\n\r\nfunction SearchBar(props) {\r\n    let typingTimer = null;\r\n\r\n    const search = (str) => {\r\n        props.setSearchStr(str);\r\n\r\n        axios.get(`http://www.omdbapi.com/?apikey=${process.env.REACT_APP_OMDB_API_KEY}&s=${str}&type=movie`)\r\n            .then((res) => props.setSearchRes(uniqBy(res.data.Search, \"imdbID\")));\r\n    }\r\n\r\n    return (\r\n        <div className=\"component flex items-center\">\r\n            <FontAwesomeIcon icon={faSearch} size=\"lg\" className=\"mx-2\"/>\r\n            <input\r\n                className=\"flex-1\"\r\n                placeholder=\"Search for a movie\"\r\n                onChange={(e) => {\r\n                    const searchString = e.target.value;\r\n\r\n                    if (searchString.length < 1) return;\r\n\r\n                    // Wait a bit before searching to avoid spamming api\r\n                    if (typingTimer) clearTimeout(typingTimer);\r\n\r\n                    typingTimer = setTimeout(() => { search(searchString); }, 1000);\r\n                }}\r\n            />\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default SearchBar;","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faList, faThLarge } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport './ViewSwitch.css';\r\n\r\nfunction ViewSwitch(props) {\r\n    return (\r\n        <div className=\"switch\">\r\n            <input type=\"checkbox\" id=\"viewSwitch\" className=\"hidden\" checked={props.isGrid} onChange={(e) => {console.log(e.target.checked); props.setIsGrid(e.target.checked)}}/>\r\n            <label htmlFor=\"viewSwitch\" className=\"component viewSwitch thin-padding rounded block relative cursor-pointer\">\r\n                <div className={`switchBlock rounded absolute bg-yellow-400 z-10 transition-all ${props.isGrid ? \"gridView\" : \"listView\"}`}></div>\r\n                <FontAwesomeIcon\r\n                    icon={faThLarge}\r\n                    size=\"lg\"\r\n                    className={`absolute z-20 transition-colors switchIcon gridView ${props.isGrid ? \"text-white\" : \"text-black\"}`}/>\r\n                <FontAwesomeIcon\r\n                    icon={faList}\r\n                    size=\"lg\"\r\n                    className={`absolute z-20 transition-colors switchIcon listView ${props.isGrid ? \"text-black\" : \"text-white\"}`}/>\r\n            </label>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ViewSwitch;","import React, { useEffect, useState } from 'react';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faClone } from '@fortawesome/free-solid-svg-icons';\r\n\r\nfunction LinkButton(props) {\r\n    const [sharableLink, setSharableLink] = useState(`${window.location.origin}${window.location.pathname}`);\r\n\r\n    useEffect(() => {\r\n        const nominatedIds = Array.from(props.nomItems.keys());\r\n        const searchParamsString = nominatedIds.length > 0 ? `?nominated=${nominatedIds.join(\",\")}` : \"\";\r\n        setSharableLink(`${window.location.origin}${window.location.pathname}${searchParamsString}`);\r\n    }, [props.nomItems]);\r\n\r\n    const copySharableLink = () => {\r\n        navigator.clipboard.writeText(sharableLink)\r\n            .then(() => {\r\n                props.setCopyBannerVisible(true);\r\n                // Auto close after a short time\r\n                setTimeout(() => {\r\n                    props.setCopyBannerVisible(false);\r\n                }, 2000);\r\n            });\r\n    }\r\n\r\n    return(\r\n        <div className=\"component thin-padding flex flex-1\">\r\n            <input className=\"flex-1 m-2\" readOnly={true} value={sharableLink} />\r\n            <button onClick={copySharableLink} className=\"bg-yellow-400 rounded flex m-2\">\r\n                <FontAwesomeIcon icon={faClone} className=\"text-white m-2\"/>\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LinkButton;","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\r\n\r\nfunction TextBanner(props) {\r\n    return (\r\n        <div className={`fixed ${props.visible ? \"top-0\" : \"-top-full\"} left-0 w-screen p-4 z-30 text-center transition-all ${props.backgroundColourClass || \"bg-gray-300\"}`}>\r\n            {props.text || \"\"}\r\n            <button className=\"h-full absolute top-0 right-10\">\r\n                <FontAwesomeIcon\r\n                    icon={faTimes}\r\n                    size=\"lg\"\r\n                    className=\"text-white\"\r\n                    onClick={() => props.setVisibility(false)} />\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TextBanner;","export default __webpack_public_path__ + \"static/media/logo.8ab42f29.svg\";","import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\n\nimport MovieListing from './components/MovieListing/MovieListing';\nimport SearchBar from './components/SearchBar/SearchBar';\nimport ViewSwitch from './components/ViewSwitch/ViewSwitch';\nimport LinkButton from './components/LinkButton/LinkButton';\nimport TextBanner from './components/TextBanner/TextBanner';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faStar, faFolderOpen } from '@fortawesome/free-regular-svg-icons';\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\n\nimport logo from './logo.svg';\nimport './App.css';\n\nconst MAX_NOMINATION_AMOUNT = 5;\n\nfunction App() {\n    const [searchStr, setSearchStr] = useState(null)\n    const [searchRes, setSearchRes] = useState(null);\n    const [nomItems, setNomItems] = useState(new Map());\n    const [isGrid, setIsGrid] = useState(true);\n\n    const [votingBannerVisible, setVotingBannerVisible] = useState(false);\n    const [copyBannerVisible, setCopyBannerVisible] = useState(false);\n\n    useEffect(() => {\n        const urlParams = (new URL(window.location)).searchParams;\n        const nominatedIds = urlParams.get(\"nominated\")?.split(\",\");\n\n        if (!nominatedIds || !nominatedIds[0]) return;\n\n        Promise.all(nominatedIds.map(id => (\n            axios.get(`http://www.omdbapi.com/?apikey=${process.env.REACT_APP_OMDB_API_KEY}&i=${id}&type=movie`)\n        )))\n            .then(res => {\n                setNomItems(prevState => {\n                    const newNoms = new Map(prevState);\n                    res.forEach(movie => newNoms.set(movie.data.imdbID, movie.data));\n                    return newNoms;\n                });\n            });\n    }, []);\n\n    const toggleMovieNomination = (id, data) => {\n        setNomItems(prevState => {\n            const newNoms = new Map(prevState);\n            if (nomItems.has(id)) {\n                newNoms.delete(id);\n            } else {\n                newNoms.set(id, data);\n            }\n            return newNoms;\n        });\n    }\n\n    useEffect(() => {\n        setVotingBannerVisible(nomItems.size === MAX_NOMINATION_AMOUNT);\n    }, [nomItems]);\n\n    return (\n        <div className=\"p-4 lg:p-20 flex flex-col bg-gray-50 min-h-screen\">\n            <TextBanner text=\"Thank you for voting!\" visible={votingBannerVisible} setVisibility={setVotingBannerVisible} backgroundColourClass=\"bg-yellow-300\"/>\n            <TextBanner text=\"Link copied.\" visible={copyBannerVisible} setVisibility={setCopyBannerVisible} />\n\n            <img src={logo} alt=\"logo\" className=\"mx-auto mb-4 xl:w-2/6\" />\n            <SearchBar setSearchRes={setSearchRes} setSearchStr={setSearchStr} />\n\n            <div className=\"flex align-middle\">\n                <LinkButton nomItems={nomItems} setCopyBannerVisible={setCopyBannerVisible} />\n                <ViewSwitch isGrid={isGrid} setIsGrid={setIsGrid} />\n            </div>\n\n            <div className=\"flex flex-1 flex-col-reverse sm:flex-row\">\n                <div className=\"component flex-1\">\n                    {!searchRes &&\n                        <div className=\"blankComponentText\">\n                            <FontAwesomeIcon icon={faSearch} size=\"3x\" className=\"text-black\"/>\n                            <div className=\"m-1\">Use the search bar to look for a movie you want to nominate!</div>\n                        </div>\n                    }\n                    {!!searchRes && (searchRes.length === 0 ?\n                        <div className=\"blankComponentText\">\n                            <FontAwesomeIcon icon={faFolderOpen} size=\"3x\" className=\"text-black\"/>\n                            <div>There are no search results.</div>\n                        </div>\n                        :\n                        <>\n                            <h3>Search results for: \"{searchStr}\"</h3>\n                            <div className={`flex-1 grid ${isGrid ? \"md:grid-cols-2 xl:grid-cols-3\" : \"grid-cols-1\"} transition-all`}>\n                                {searchRes.map(res => (\n                                    <MovieListing data={res} key={res.imdbID} onClick={toggleMovieNomination} disabled={nomItems.size >= MAX_NOMINATION_AMOUNT || nomItems.has(res.imdbID)} nominated={nomItems.has(res.imdbID)} isGrid={isGrid} />\n                                ))}\n                            </div>\n                        </>\n                    )}\n                </div>\n\n                <div className=\"component flex-1\">\n                    {nomItems.size === 0 ?\n                        <div className=\"blankComponentText\">\n                            <FontAwesomeIcon icon={faStar} size=\"3x\" className=\"text-black\"/>\n                            <div className=\"m-1\">You haven't nominated any items yet. Click a movie to nominate it.</div>\n                        </div>\n                        :\n                        <>\n                            <h3 className=\"flex-1\">Nominations: {nomItems.size}/{MAX_NOMINATION_AMOUNT}</h3>\n                            <div className={`grid ${isGrid ? \"md:grid-cols-2 xl:grid-cols-3\" : \"grid-cols-1\"} transition-all`}>\n                                {Array.from(nomItems.values()).map(res => (\n                                    <MovieListing data={res} key={res.imdbID} onClick={toggleMovieNomination} nominated={true} disabled={false} isGrid={isGrid} />\n                                ))}\n                            </div>\n                        </>\n                        \n                        \n                    }\n                </div>\n            </div>\n\n            \n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}